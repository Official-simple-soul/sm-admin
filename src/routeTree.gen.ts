/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as EmployeeIndexRouteImport } from './routes/employee/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as ContentIndexRouteImport } from './routes/content/index'
import { Route as BlogsIndexRouteImport } from './routes/blogs/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as ContentNewContentRouteImport } from './routes/content/new-content'
import { Route as ContentContentIdRouteImport } from './routes/content/$contentId'
import { Route as BlogsBlogIdRouteImport } from './routes/blogs/$blogId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeeIndexRoute = EmployeeIndexRouteImport.update({
  id: '/employee/',
  path: '/employee/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentIndexRoute = ContentIndexRouteImport.update({
  id: '/content/',
  path: '/content/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsIndexRoute = BlogsIndexRouteImport.update({
  id: '/blogs/',
  path: '/blogs/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentNewContentRoute = ContentNewContentRouteImport.update({
  id: '/content/new-content',
  path: '/content/new-content',
  getParentRoute: () => rootRouteImport,
} as any)
const ContentContentIdRoute = ContentContentIdRouteImport.update({
  id: '/content/$contentId',
  path: '/content/$contentId',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsBlogIdRoute = BlogsBlogIdRouteImport.update({
  id: '/blogs/$blogId',
  path: '/blogs/$blogId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/content/$contentId': typeof ContentContentIdRoute
  '/content/new-content': typeof ContentNewContentRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/blogs': typeof BlogsIndexRoute
  '/content': typeof ContentIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/employee': typeof EmployeeIndexRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/content/$contentId': typeof ContentContentIdRoute
  '/content/new-content': typeof ContentNewContentRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/blogs': typeof BlogsIndexRoute
  '/content': typeof ContentIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/employee': typeof EmployeeIndexRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/content/$contentId': typeof ContentContentIdRoute
  '/content/new-content': typeof ContentNewContentRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/blogs/': typeof BlogsIndexRoute
  '/content/': typeof ContentIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/employee/': typeof EmployeeIndexRoute
  '/users/': typeof UsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blogs/$blogId'
    | '/content/$contentId'
    | '/content/new-content'
    | '/demo/tanstack-query'
    | '/users/$userId'
    | '/blogs'
    | '/content'
    | '/dashboard'
    | '/employee'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blogs/$blogId'
    | '/content/$contentId'
    | '/content/new-content'
    | '/demo/tanstack-query'
    | '/users/$userId'
    | '/blogs'
    | '/content'
    | '/dashboard'
    | '/employee'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/blogs/$blogId'
    | '/content/$contentId'
    | '/content/new-content'
    | '/demo/tanstack-query'
    | '/users/$userId'
    | '/blogs/'
    | '/content/'
    | '/dashboard/'
    | '/employee/'
    | '/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogsBlogIdRoute: typeof BlogsBlogIdRoute
  ContentContentIdRoute: typeof ContentContentIdRoute
  ContentNewContentRoute: typeof ContentNewContentRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  BlogsIndexRoute: typeof BlogsIndexRoute
  ContentIndexRoute: typeof ContentIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  EmployeeIndexRoute: typeof EmployeeIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employee/': {
      id: '/employee/'
      path: '/employee'
      fullPath: '/employee'
      preLoaderRoute: typeof EmployeeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/': {
      id: '/content/'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs/': {
      id: '/blogs/'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/new-content': {
      id: '/content/new-content'
      path: '/content/new-content'
      fullPath: '/content/new-content'
      preLoaderRoute: typeof ContentNewContentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/content/$contentId': {
      id: '/content/$contentId'
      path: '/content/$contentId'
      fullPath: '/content/$contentId'
      preLoaderRoute: typeof ContentContentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs/$blogId': {
      id: '/blogs/$blogId'
      path: '/blogs/$blogId'
      fullPath: '/blogs/$blogId'
      preLoaderRoute: typeof BlogsBlogIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogsBlogIdRoute: BlogsBlogIdRoute,
  ContentContentIdRoute: ContentContentIdRoute,
  ContentNewContentRoute: ContentNewContentRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  BlogsIndexRoute: BlogsIndexRoute,
  ContentIndexRoute: ContentIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  EmployeeIndexRoute: EmployeeIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
